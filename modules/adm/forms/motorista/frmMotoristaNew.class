<?
class frmMotoristaNew extends MForm
{
    function __construct()
    {
        parent::__construct('Incluir Novo Motorista');
        $this->EventHandler();
        $this->defaultButton = false;
        $this->page->addJsCode(file_get_contents(dirname(__FILE__) . '/../../ui/js/mask.js'));
	$this->page->addJsCode(file_get_contents(dirname(__FILE__) . '/../../ui/js/maskMoney.js'));
    }

    function CreateFields()
    {
       global $MIOLO, $module, $action, $item, $theme, $event;
        $tabelaGeral = $this->manager->getBusiness('common','tabelageral');
        $categorias = $tabelaGeral->listByTabela('AD_CATEGORIAHABILITACAO')->result;
        $ativo = array(1 => "SIM", 0 => "NÃO");
        
        $fields = array (
            new MHiddenField('idPessoa'),
            new MHiddenField('idUsuario'),
            //new MLookupTextField('lkpPessoa','','Nome',50),
            //new MLookupTextField('lkplogin', '', 'Login', 40, NULL, NULL, NULL, 'common', 'usuarioTodos'),
            new MLookupTextField('lkplogin','','Login',50),
            new MTextField('carteiraHab','','Carteira de Habilitação','15','Máx. 15 caracteres'),
            new MSelection('categoria','','Categoria',$categorias),
            new MSelection('ativo', '1', 'Ativos', array('0' => 'Não', '1' => 'Sim')),//new MSelection('ativo','','Ativo',$ativo),
            new MCalendarField('dataValidade','','Data de Validade'),
        );
        $this->SetFields($fields);
        $this->dataValidade->addAttribute('onKeyUp', 'makeMask(this, \'##/##/####\');');
        $this->dataValidade->addAttribute('onBlur', 'makeMask(this, \'##/##/####\');');
        $this->SetFieldAttr('lkpPessoa','module','common');
        $this->SetFieldAttr('lkpPessoa','item','Pessoa1');
        $this->SetFieldAttr('lkpPessoa','event','filler');
        $this->SetFieldAttr('lkpPessoa','related','idPessoa, lkpPessoa');
        
        $this->SetFieldAttr('lkplogin','module','common');
        $this->SetFieldAttr('lkplogin','item','Usuario');
        $this->SetFieldAttr('lkplogin','event','filler');
        $this->SetFieldAttr('lkplogin','related','idUsuario, lkplogin');
        
//        $this->SetFieldAttr('lkpLogin','module','common');
//	$this->SetFieldAttr('lkpLogin','item','usuarioTodos');
//        $this->SetFieldAttr('lkpLogin','event','filler');
//        $this->SetFieldAttr('lkpLogin','related','idUsuario, lkpLogin');
	   
        $buttons = array (
            new FormButton('btnNew', 'Cadastrar Motorista')
        );
        $this->SetButtons($buttons);

        $validators = array (
            new MRequiredValidator('lkpPessoa'),
            new MRequiredValidator('carteiraHab'),
            new MRequiredValidator('lkpLogin'),
            new MDateDMYValidator('dataValidade')
        );
        $this->SetValidators($validators);
    }

    function btnNew_click()
    {
		$data = $this->GetData();
		$motorista = $this->manager->GetBusiness('adm','motorista');

		if(!is_numeric($data->carteiraHab) or ($data->carteiraHab <= 0) or ( strlen(trim($data->carteiraHab)) < 4))
		{
			$this->AddError('Informe corretamente o número da carteira de motorista correta.');
		}
		elseif($data->categoria == '')
		{
			$this->AddError('Defina a categoria da carteira de habilitação.');
		}
                elseif( Form::GetFormValue('ativo') == '' )
		{
			$this->AddError('Você deve selecionar se o crlv esta ativo.');
		}
                elseif( Form::GetFormValue('idUsuario') == '' )
		{
			$this->AddError('Você deve informar seu usuário.');
		}
		else
		{
                        /*$ret = $this->verificaIdUsuario(Form::GetFormValue('idUsuario'), Form::GetFormValue('idPessoa'));
                        if($ret){*/
			$motorista->SetData($data);

			try
			{
				$motorista->save();
				$motorista->Log(OP_INS,"Novo motorista criado");
				$go = $this->manager->GetActionURL('adm','main:motorista',$motorista->idMotorista);
				$this->manager->Information('Novo motorista criado com sucesso',$go);
			}
			catch (Exception $e)
			{
				$this->addError($e->getMessage());
			}
                        /*}else{
                           $this->AddError('Motorista não corresponde a esse usuário.'); 
                        }*/
		}
	}
        
        public function verificaIdUsuario($idUsuario, $idPessoa){
            global $MIOLO;
            $retorna = true;
            $objUsuario = $MIOLO->GetBusiness('common','usuario');
            $idUserPess = $objUsuario->getIDUsuarioIDPessoa($idUsuario, $idPessoa);
            if($idUserPess){
                $retorna = true;
            }
            else{
                $retorna = false;
            }
            
            return $retorna;
        }

}
?>