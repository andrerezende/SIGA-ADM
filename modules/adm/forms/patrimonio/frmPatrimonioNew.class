<?php
ini_set( 'default_charset', 'utf-8');

class frmPatrimonioNew extends MForm
{


    function __construct()
    {
//	if ($this->manager->perms->checkAccess('adm_patrimonio',A_EXECUTE)){
			parent::__construct('Dados Da Nota Fiscal');
			$this->EventHandler();
			$this->defaultButton = false;
			$this->page->addJsCode(file_get_contents(dirname(__FILE__) . '/../../ui/js/mask.js'));
			$this->page->addJsCode(file_get_contents(dirname(__FILE__) . '/../../ui/js/maskMoney.js'));

//	}else{
//		$this->AddError("aa");
//	}
    }

    function CreateFields()
    {
        global $MIOLO, $module, $action, $item, $theme, $event;

	/* ---------------------  Dados Mantidos  -----------------------------------*/
//if($perms->CheckAccess('adm',A_ACCESS,true))
if (
			($this->manager->perms->CheckAccess('adm_patrimonio_listar',A_ACCESS,false))
		||	($this->manager->perms->CheckAccess('adm_patrimonio_admin',A_ACCESS,false))
		||	($this->manager->perms->CheckAccess('adm_patrimonio_bloquear',A_ACCESS,false))


	)
	{

                    if($_GET['manter']=='') {
		$manter='Não';
	} else {
		$manter=$_GET['manter'];
	}
	$idvidautil	=$_GET['idvidautil'];
	$idmaterial	=$_GET['idmaterial'];
	$idsetor=$_GET['idsetor'];
	$idFornecedor=$_GET['idFornecedor'];
	$idnotafiscal=$_GET['idNotaFiscal'];
	$codigomaterial=$_GET['codigomaterial'];
	$descricao=  urldecode($_GET['descricao']);
	$numeroserie=$_GET['numeroserie'];
	$numeroempenho=$_GET['numeroempenho'];
	//$cnpj2=$_GET['cnpj2'];
	$tomboanterior=$_GET['tomboanterior'];
	$marcamodelo=$_GET['marcamodelo'];
	$classificador=$_GET['classificador'];
	$estadomaterial=$_GET['estadomaterial'];
	$dataaquisicao=$_GET['dataaquisicao'];
	$setor=$_GET['setor'];
	$processo=$_GET['processo'];
	$datainicio=$_GET['datainicio'];
	$contacontabil=$_GET['contacontabil'];
	$notafiscal=$_GET['notafiscal'];
	$obs=$_GET['obs'];
	$valortotal=$_GET['valortotal'];
	$quantidade=$_GET['quantidade'];
	$datanotafiscal=$_GET['datanotafiscal'];
	$dataateste=$_GET['dataateste'];
	$valordesconto=$_GET['valordesconto'];
        $datagarantia=$_GET['datagarantia'];

		/*-------------------------------------------------------------------------------- */

	//$MIOLO->information( _M( 'Notaa Fiscal Estornada com Sucesso', $module ), $go);

        $cf = new MCurrencyFormatter();
        $tipoIngresso = $this->GetFormValue('tipoIngresso');

        $tabelaGeral = $MIOLO->GetBusiness('common', 'tabelageral');
        $objFornecedor=$MIOLO->GetBusiness('adm', 'fornecedor');
	$objNotaFiscal=$MIOLO->GetBusiness('adm', 'notafiscal');

	$objNotaFiscal=$objNotaFiscal->GetById($idnotafiscal);
	$objFornecedor=$objFornecedor->GetById($objNotaFiscal->idFornecedor);
	$options = $tabelaGeral->ListByTabela('AD_TIPOINGRESSOPAT');
        $fields = array(
            new MHiddenField('tipoIngresso',$tipoIngresso,'Tipo de Ingresso',$options->result),
		new MLookupTextField('filterCodigo',$codigomaterial,'Código do Material',20),
            new MMultiLineField('descricao',$descricao,'Descrição*',60,5,60,'Máx. 500 caracteres'),
            new MTextField('marcaModelo',$marcamodelo,'Marca/Modelo',60,'Máx. 50 caracteres'),
            new MHiddenField('idMaterial', $idmaterial),            
            new MTextField('numeroEmpenho', $numeroempenho, 'Número de Empenho',20),
            //new MTextField('cnpj', $cnpj2, 'CNPJ',18, "Apenas números"),
            new LookupTextField('lkpFornecedor', $objFornecedor->nome, 'Fornecedor', 40, null, null, null, 'adm', 'fornecedor'),
            new HiddenField('idFornecedor', $objFornecedor->idFornecedor, 'idFornecedor'),
            // 26/08/2011 - Daniel Bonfim                       
            new MLookupTextField('idClassificador',$classificador,'Classificador*',50),            
            new MCalendarField('dataAquisicao',$dataaquisicao,'Data de Aquisição*',20,'Formato: dd/mm/aaaa (ex. 06/06/2012)'),
            new MCalendarField('dataGarantia',$datagarantia,'Data da Garantia',20,'Formato: dd/mm/aaaa (ex. 06/06/2012)'),
            new MHiddenField('idEmpenhado'),            
            new MTextField('numPro',$processo,'Processo',20,'Ex: Processo: 23059.000707/2009-92, coloca-se 000707/2009-92'),
            // 20/10/2010 - Vitor Pacheco
            new MHiddenField('subelemento'),
            new MTextField('quantidade','','Qt. Total Empenhada',10),
            new MTextField('quantidadeItemNF','','Qt. Item Nota',10),
            // 18/10/2010 - Vitor Pacheco
			
			new MLookupTextField('contacontabil', $contacontabil, 'Conta contábil*', 50, NULL, NULL, NULL, 'adm', 'contacontabil'),
			new MHiddenField('idvidautil', $idvidautil),
            new MTextField('notaFiscal2',$notafiscal,'Nota Fiscal*',20),
            new MTextField('valor',$valortotal,'Valor Total*',10,''),
            new MTextField('quantidadeOutros',$quantidade,'Quantidade*',10),
            new MCalendarField('dataNotaFiscal',$datanotafiscal,'Data da Nota Fiscal*',20),
            new MCalendarField('dataAteste',$dataateste,'Data do Ateste*',20),
            new MMultiLineField('obs',$obs,'Obs',60,4,60,'Máx. 200 caracteres'),
            new MTextField('valorDesconto',$valordesconto,'Valor Desconto',10),   
            //10/09/2012 - Tiago Macedo
            new MSpacer(1),
            new MBox('Dados Do Item'),            
            new MLookupTextField('setor',$setor,'Setor*',50,NULL, NULL, NULL, 'common', 'setor2'),
            new MHiddenField('idSetor',$idsetor),   
            new MTextField('numeroSerie',$numeroserie,'Número de Série',20),
            new MMultiLineField('descricaoEstado',$estadomaterial,'Estado do Material*', 50, 5, 50,'Máx. 100 caracteres'),
            new MCalendarField('datainiciouso',$datainicio,'Data de Início de uso',20),
            new MTextField('tomboanterior', $tomboanterior, 'Tombo anterior',18, "Máx. 20 caracteres"),

        );
        $this->SetFields($fields);

        $this->SetFieldAttr('tipoIngresso','readonly',true);
        $this->SetFieldAttr('quantidade','readonly',true);
        $this->SetFieldAttr('quantidadeItemNF','readonly',true);
//        $this->SetFieldAttr('setor','module','adm');
//        $this->SetFieldAttr('setor','item','setor');
        $this->SetFieldAttr('setor','related','idSetor,setor');
        $this->SetFieldAttr('idClassificador','module',$module);
        $this->SetFieldAttr('idClassificador','item','classificador');
        $this->SetFieldAttr('idClassificador','related','idClassificador');
        $this->SetFieldAttr('filterCodigo','module',$module);
        $this->SetFieldAttr('filterCodigo','item','materialPermanente');
        $this->SetFieldAttr('filterCodigo','related','idMaterial,descricao,filterCodigo');
        $this->SetFieldAttr('numeroSerie','visible',false);
        $this->SetFieldAttr('lkpFornecedor', 'related', 'idFornecedor,lkpFornecedor');

	$this->descricao->addAttribute('maxlength',500);
        $this->numeroSerie->addAttribute('maxlength',15);
        $this->numeroEmpenho->addAttribute('maxlength',12);
        $this->idClassificador->addAttribute('maxlength',12);
        $this->descricaoEstado->addAttribute('maxlength',100);
        $this->valor->addAttribute('maxlength',10);
        $this->filterCodigo->addAttribute('maxlength',14);
        $this->numPro->addAttribute('onKeyUp', 'makeMask(this, \'######/####-##\');');
        $this->numPro->addAttribute('onBlur', 'makeMask(this, \'######/####-##\');');
        $this->dataAquisicao->addAttribute('onKeyUp', 'makeMask(this, \'##/##/####\');');
        $this->dataAquisicao->addAttribute('onBlur', 'makeMask(this, \'##/##/####\');');
        $this->dataGarantia->addAttribute('onKeyUp', 'makeMask(this, \'##/##/####\');');
        $this->dataGarantia->addAttribute('onBlur', 'makeMask(this, \'##/##/####\');');
        $this->datainiciouso->addAttribute('onKeyUp', 'makeMask(this, \'##/##/####\');');
        $this->datainiciouso->addAttribute('onBlur', 'makeMask(this, \'##/##/####\');');
        $this->tomboanterior->addAttribute('maxlength',20);
        $this->tomboanterior->addAttribute('maxlength',20);
        $this->marcaModelo->addAttribute('maxlength',50);
        
        $this->notaFiscal2->addAttribute('maxlength',16);        
        $this->valor->addAttribute('onKeyUp', 'amf2005_BecameCurrency(this,15)');
        $this->valor->addAttribute('onBlur', 'amf2005_BecameCurrency(this,15)');

        $this->valorDesconto->addAttribute('onKeyUp', 'amf2005_BecameCurrency(this,15)');
        $this->valorDesconto->addAttribute('onBlur', 'amf2005_BecameCurrency(this,15)');
        $this->quantidadeOutros->addAttribute('maxlength',7);
        $this->obs->addAttribute('maxlength',200);
        $this->dataAteste->addAttribute('onKeyUp', 'makeMask(this, \'##/##/####\');');
        $this->dataAteste->addAttribute('onBlur', 'makeMask(this, \'##/##/####\');');
        $this->dataNotaFiscal->addAttribute('onKeyUp', 'makeMask(this, \'##/##/####\');');
        $this->dataNotaFiscal->addAttribute('onBlur', 'makeMask(this, \'##/##/####\');');





        // 16/06/2011 - Daniel Bonfim
        //$this->cnpj->addAttribute('maxlength',14);
		//var_dump($cnpj2);exit;
//
//        $this->cnpj->addAttribute('maxlength',18);
//        $this->cnpj->addAttribute('onKeyUp', 'makeMask(this, \'##.###.###/####-##\');');
//	$this->cnpj->addAttribute('onBlur', 'makeMask(this, \'##.###.###/####-##\');');

	// 18/10/2010 - Vitor Pacheco
		$this->SetFieldAttr('contacontabil', 'related', 'idvidautil,contacontabil');

	if($tipoIngresso == '1' or $tipoIngresso == '9') //item é proveniente de COMPRA
	{
		$empenhado = $MIOLO->GetBusiness($module, 'empenhado');
		$passo = $this->GetFormValue('passo');

		if($passo == 'Empenho')
		{
			if ($tipoIngresso == '9')
			{
				$query = $empenhado->ListEmpenhosComItensAPatrimoniarAcervo();
			}else
			{
				$query = $empenhado->ListEmpenhosComItensAPatrimoniar();
			}

			$columns = array(
				new MDataGridColumn('numero','Número','center',false, '15%'),
				new MDataGridColumn('dataEmpenho','Data','center', true, '15%'),
				new MDataGridColumn('fornecedor','Fornecedor','left', true, '70%'),
			);

			$href_datagrid = $MIOLO->GetActionURL($module,$action,$item, array('tipoIngresso'=>$tipoIngresso,'passo'=>'Empenho') );
			$datagrid = new MDataGrid2($query, $columns, $href_datagrid,0);
			$datagrid->SetTitle('Relação de Empenhos com Itens a Patrimoniar');
			$hrefNF = $MIOLO->GetActionURL($module, $action, '%0%', array('tipoIngresso'=>$tipoIngresso, 'passo'=>'NotaFiscal') );
			$datagrid->SetWidth('99%');
			$datagrid->SetClose(null);
			$datagrid->addActionIcon('Incluir','select.gif',$hrefNF);
			$this->SetFields($datagrid);
		}
		else if($passo == 'NotaFiscal')
		{
			$empenho = $MIOLO->GetBusiness($module, 'empenho', $item);
			$empenho->retrieveAssociation('empenhado');
			$empenho->getValorContabilizado();
			$empenho->getValor();
			$empenho->getFornecedor();
			$empenho->empenhado[0]->retrieveAssociation('licitacao');

			/****************************************************/
			//$query = $empenhado->ListItensAPatrimoniarPorEmpenho($item);
			/****************************************************/
			$NFEdit = $this->GetFormValue('NF');
			if ($tipoIngresso == '9')
			{
				if($NFEdit)
				{
					$query = $empenhado->ListItensAPatrimoniarPorEmpenhoAcervo2($item);
				}
				else
				{
					$query = $empenhado->ListItensAPatrimoniarPorEmpenhoAcervo($item);
				}
			}
			else
			{
				if($NFEdit)
				{
					$query = $empenhado->ListItensAPatrimoniarPorEmpenho2($item);
				}
				else
				{
					$query = $empenhado->ListItensAPatrimoniarPorEmpenho($item);
				}
			}

			/*****************************************************************/
			$columns = array(
				new MDataGridColumn('descricao','Descrição','left',false, '66%'),
				new MDataGridColumn('quantidadeEmp','Qt Empenhada','center', true, '12%'),
				new MDataGridColumn('quantidadePat','Qt Patrimoniada','center', true, '12%'),
				new MDataGridColumn('quantidadeNota','Qt Nota','center', true, '10%'),
			);

		/*************************************
                //$NFEdit = $this->GetFormValue('NF');
		*************************************/
                $notaFiscal = $MIOLO->GetBusiness($module, 'notafiscal');
                //itens da nota
                if($NFEdit)
                {
                    for($i = 0; $i < count($query->result); $i++)
                    {
                        $itemNota = $MIOLO->GetBusiness($module, 'itemnota');
                        $itemNota = $itemNota->GetByIdNotaEmpenhado($NFEdit, $query->result[$i][0]);
                        $query->result[$i][5] = $itemNota->result[0][0];
                        $query->result[$i][4] = $itemNota->result[0][3];
                    }
                }

                $href_datagrid = $MIOLO->GetActionURL($module,$action,$item,array('tipoIngresso'=>$tipoIngresso));
                $datagrid = new MDataGrid2($query, $columns, $href_datagrid, 0);
                $datagrid->SetTitle('Itens do Empenho');
                $datagrid->SetRowMethod('frmPatrimonioNew', 'MyRowMethod2');
                $this->SetTitle('Dados da Nota Fiscal Referente ao Empenho');
                $href = $MIOLO->GetActionURL($module, $action, '%0%', array('tipoIngresso'=>$tipoIngresso, 'passo'=>'Inclusão', 'idNF'=>'%5%') );
                $datagrid->SetWidth('99%');
                $datagrid->SetClose(null);
                if($NFEdit)
                {
                    $notaFiscal->GetById($NFEdit);
                    $datagrid->SetTitle('Itens da Nota Fiscal ' . $notaFiscal->notaFiscal);
                    $datagrid->addActionIcon('Incluir','edit.gif',$href);
                }

                //relação de nfs para o empenho
                $query = $notaFiscal->GetNotasByIdEmpenho($item);
                for($i = 0; $i < count($query->result); $i++)
                {
                    $query->result[$i][3] = number_format(str_replace(',','.',$query->result[$i][3]),2,',','.');
                }
                $columnsNF = array(
                    new MDataGridColumn('notaFiscal','Nota Fiscal','center',false, '33%'),
                    new MDataGridColumn('dataNotaFiscal','Data Nota Fiscal','center',false, '34%'),
                    new MDataGridColumn('valor','Valor','center', true, '33%'),
                );
                $datagridNF = new MDataGrid2($query, $columnsNF, '', 0);
                $datagridNF->SetTitle("Notas Fiscais Lançadas para o Empenho $empenho->numero");
                $datagridNF->SetWidth('99%');
                $hrefNF = $MIOLO->GetActionURL($module, $action, $item, array('tipoIngresso'=>$tipoIngresso, 'passo'=>'NotaFiscal', 'NF'=>'%0%') );
                $datagridNF->addActionIcon('Alterar','edit.gif',$hrefNF);

                $fields = array(
                    new MTextField('empenho',$empenho->numero,'Empenho',20),
                    new MTextField('tipoEmpenho',$empenho->tipoEmpenho,'Tipo',10),
                    new MTextField('licitacao',$empenho->empenhado[0]->licitacao->numero,'Licitação',20),
                    new MTextField('fornecedor',$empenho->fornecedor->instituicao->nome,'Fornecedor',70),
                    new MTextField('dataEmpenho',$empenho->dataEmpenho,'Data',20),
                    new MTextField('saldo',$cf->format($empenho->valorSaldo),'Saldo',20),
                    new MSpacer(1),
                    new MSeparator('Dados da Nota Fiscal'),
                    new MHiddenField('idNotaFiscal',$idnotafiscal),

                    new MTextField('notaFiscal',$notafiscal,'Nota Fiscal',20),
                    new MCalendarField('dataNotaFiscal',$datanotafiscal,'Data da Nota Fiscal',20),
                    new MCalendarField('dataAteste',$dataateste,'Data do Ateste',20),
                    new MMultiLineField('obs',$obs,'Obs',60,4,60,'Máx. 200 caracteres'),

					new MTextField('valor','','Valor da Nota Fiscal',10),
                    new MTextField('valorDesconto',$valordesconto,'Valor Desconto',10),

                    new MHiddenField('tipoIngresso', $tipoIngresso),
                    new MHiddenField('passoRetorno', 'NotaFiscal'),
                    new MSpacer(2),
                    $datagridNF,
                    new Text('','<b>Obs.: Para editar os dados ou patrimoniar os itens referentes a uma nota fiscal já gravada, clique no ícone de editar no grid acima.</b>'),
                    new MSpacer(2),
                    $datagrid,
                    new Text('','<b>Obs.: Para patrimoniar um item, primeiro escolha uma nota fiscal já lançada no grid de notas, depois clique no ícone de editar no grid acima.</b>'),
                );
		$this->dataAteste->addAttribute('onKeyUp', 'makeMask(this, \'##/##/####\');');
		$this->dataAteste->addAttribute('onBlur', 'makeMask(this, \'##/##/####\');');

		$this->SetFields($fields);
                $this->SetFieldAttr('empenho', 'readonly', true);
                $this->SetFieldAttr('tipoEmpenho', 'readonly', true);
                $this->SetFieldAttr('licitacao', 'readonly', true);
                $this->SetFieldAttr('fornecedor', 'readonly', true);
                $this->SetFieldAttr('dataEmpenho', 'readonly', true);
                $this->SetFieldAttr('saldo', 'readonly', true);

                if($NFEdit)
                {
                    $notaFiscal->GetById($NFEdit);
                    $this->SetFieldValue('idNotaFiscal', $notaFiscal->idNotaFiscal);
                    $this->SetFieldValue('notaFiscal', $notaFiscal->notaFiscal);
                    $this->SetFieldValue('dataNotaFiscal', $notaFiscal->dataNotaFiscal);
                    $this->SetFieldValue('dataAteste', $notaFiscal->dataAteste);
                    $this->SetFieldValue('obs', $notaFiscal->obs);
                    $this->SetFieldValue('valor', $cf->format($notaFiscal->valor));
                    $this->SetFieldValue('valorDesconto', $cf->format($notaFiscal->desconto));
                    //IFSP - Thaís
                    $this->AddButton(new MButton('btnExcluiNota', 'Excluir Nota Fiscal'));

                }

                //grava e volta para passo atual
                 $this->AddButton(new MButton('btnNotaFiscal', 'Gravar Nota Fiscal'));
            }
            else if($passo == 'Inclusão')
            {
                $idNF = $this->GetFormValue('idNF');
                $itemNota = $MIOLO->GetBusiness($module, 'itemnota', $idNF);
                $notaFiscal = $MIOLO->GetBusiness($module, 'notafiscal', $itemNota->idNotaFiscal);
                $processo = $MIOLO->GetBusiness('protocolo', 'processo', $data->result[0][3]);
                $this->SetFieldValue('numPro',$processo->numProcessoFormatado());


				if ($tipoIngresso == '9')
				{
                $data = $empenhado->GetDadosItemAPatrimoniarAcervo($item);
				}else
				{
                $data = $empenhado->GetDadosItemAPatrimoniar($item);
				}
                $this->SetFieldValue('idEmpenhado',$data->result[0][0]);
                $this->SetFieldValue('idMaterial',$data->result[0][1]);
                $this->SetFieldValue('descricao',$data->result[0][2]);
                $processo = $MIOLO->GetBusiness('protocolo', 'processo', $data->result[0][3]);
                $this->SetFieldValue('numPro',$processo->numProcessoFormatado());
                $this->SetFieldValue('subelemento',$data->result[0][4]);
                $this->SetFieldValue('quantidade',$data->result[0][6]);
                $this->SetFieldValue('quantidadeItemNF',$itemNota->quantidade);
                $this->SetFieldValue('marcaModelo',$data->result[0][7]);
                $this->SetFieldValue('dataAquisicao',date('d/m/Y'));

                //$this->SetFieldValue('descricaoestado', $itemNota->descricaEstado);

                $buttons = array(
                    new MButton('btnNew', 'Cadastrar Item')

                );
                $this->SetButtons($buttons);

                //grid de setores
                $empenhado->GetById($item);
				//var_dump($tipoIngresso);
				if ($tipoIngresso == '9')
				{
				$empenhado->getItemReqBib();
				$empenhado->itemreq = $empenhado->itemreqbib;
				}
				else
				{
                $empenhado->getItemReq();
				}

				$empenhado->getQuantidadeEmpenhada();
                $quant = $this->GetFormValue('quant');
                $setores = array();
                $idSetores = '';
                $k = 0;
                foreach($empenhado->itemreq as $i)
                {
                    $requisicao = $MIOLO->GetBusiness($module, 'requisicao', $i->idRequisicao);
                    $uo = $MIOLO->GetBusiness($module, 'uo', $requisicao->idUoRequisitante);
                    //atualiza valor, se o textfield='' e quantidadeEmp, qts empenhadas do itemreq (distribuido) e qt itemNota forem iguais
                    if((!$quant[$k]) and ($data->result[0][6] == $empenhado->quantidadeEmpenhada) and ($data->result[0][6] == $itemNota->quantidade))
                    {
                        $quant[$k] = $i->quantEmpenhada;
                    }
                    $setores[] = array($uo->nome . ' (' . $uo->sigla . ')', $i->quantEmpenhada, $quant[$k]);
                    $idSetores .= $uo->idSetor . ';';
                    $k++;
                }
                $idSetores = substr($idSetores,0,-1);
                $this->SetFieldValue('idSetor', $idSetores);
                $columns = array(
                    new MGridColumn('Setor','left',false, '70%'),
                    new MGridColumn('Quant. Empenhada','center', true, '15%'),
                    new MGridColumn('Quantidade','center', true, '15%'),
				);
                $grid = new MGrid($setores, $columns, $href_datagrid,0);
                $grid->SetTitle("Distribuição do Item (Nota Fiscal $notaFiscal->notaFiscal) por Setores");
                $grid->SetClose(null);
                $grid->SetWidth('99%');
                $grid->SetRowMethod('frmPatrimonioNew', 'MyRowMethod');
                $this->AddField(new MSpacer(1));
                $this->AddField($grid);
                $this->AddField(new MHiddenField('valor',$data->result[0][5]));
                $this->AddField(new MHiddenField('quantidade',$data->result[0][6]));
                $this->AddField(new MHiddenField('quantidadeNF',$itemNota->quantidade));
                $this->AddField(new MHiddenField('idNF',$idnotafiscal));
                $this->SetFieldAttr('setor','visible',true);
                //$this->SetFieldAttr('setor','visible',false);
                $this->SetFieldAttr('filterCodigo','visible',false);

                $erro = $this->GetFormValue('erro');
                if($erro == '2')
                {
                    $soma = $this->GetFormValue('soma');
                    $quantidadeEmp = $this->GetFormValue('quantidadeEmp');
                    $quantidadeNF = $this->GetFormValue('quantidadeNF');
                    $this->Error("Quantidades informadas ($soma) não conferem com a quantidade do item da Nota Fiscal ($quantidadeNF).");
                }
            }
        }
        else //item não é proveniente de COMPRA
        {            
            $this->SetFieldAttr('numPro','visible',true);
            $this->SetFieldAttr('quantidade','visible',false);
            $this->SetFieldAttr('quantidadeItemNF','visible',false);
            $this->SetFieldAttr('numeroSerie','visible',true);


            $this->AddField(new MTextField('numeroEmpenho',$numeroempenho,'Empenho',20));
            
//            $this->AddField(new MTextField('notaFiscal2',$notafiscal,'Nota Fiscal*',20));
//		$this->notaFiscal2->addAttribute('maxlength',16);
           // echo $tipoIngresso;
			if($tipoIngresso != '8')
            {
//                $this->AddField(new MTextField('valor',$valortotal,'Valor Total*',10,''));
//                $this->AddField(new MTextField('quantidadeOutros',$quantidade,'Quantidade*',10));
//                $this->AddField(new MCalendarField('dataNotaFiscal',$datanotafiscal,'Data da Nota Fiscal*',20));
//                $this->AddField(new MCalendarField('dataAteste',$dataateste,'Data do Ateste*',20));
//                $this->AddField(new MMultiLineField('obs',$obs,'Obs',60,4,60,'Máx. 200 caracteres'));
//                $this->AddField(new MTextField('valorDesconto',$valordesconto,'Valor Desconto',10));
//		$this->valor->addAttribute('onKeyUp', 'amf2005_BecameCurrency(this,15)');
//		$this->valor->addAttribute('onBlur', 'amf2005_BecameCurrency(this,15)');
//
//		$this->valorDesconto->addAttribute('onKeyUp', 'amf2005_BecameCurrency(this,15)');
//		$this->valorDesconto->addAttribute('onBlur', 'amf2005_BecameCurrency(this,15)');
//		$this->quantidadeOutros->addAttribute('maxlength',7);
//		$this->obs->addAttribute('maxlength',200);
//		$this->dataAteste->addAttribute('onKeyUp', 'makeMask(this, \'##/##/####\');');
//		$this->dataAteste->addAttribute('onBlur', 'makeMask(this, \'##/##/####\');');
//		$this->dataNotaFiscal->addAttribute('onKeyUp', 'makeMask(this, \'##/##/####\');');
//		$this->dataNotaFiscal->addAttribute('onBlur', 'makeMask(this, \'##/##/####\');');

		$this->AddField(new MSpacer(2));
		$this->AddField(new MSeparator(''));
		$options=array('Sim','Não');

										$this->AddField(new MTextHeader('header', 1,'Manter os dados para uma próxima inclusão?'));
		$opcao=$this->AddField( new MRadioButtonGroup('manterdados', '', $options,$manter));
		$this->AddField(new MSeparator(''));
		$this->AddField(new MSpacer(1));
		$this->AddField(new MTextHeader('header', 1,'(*) Campos obrigatórios'));
		$this->AddField(new MSpacer(2));

	       $this->SetFieldAttr('numeroEmpenho', 'visible', false);
	       //$this->SetFieldValue('manterdados' );

            }
            else
            {
                $this->AddField(new MTextField('valor','','Valor',10));
                $this->AddField(new MTextField('quantidadeOutros','','Quantidade',10));
                //$this->SetFieldValue('quantidadeOutros', '1');
                //$this->SetFieldValue('quantidade', '1');
                $this->SetFieldValue('filterCodigo', '449052');
            }
            $this->SetFieldValue('dataAquisicao',date('d/m/Y'));

            $buttons = array(
                new MButton('btnNew', 'Cadastrar Item')
            );
            $this->SetButtons($buttons);
        }
}else{
	$this->AddError("Sua sessão expirou ou você não tem os privilégios necessários para a inclusão de Itens Patrimoniais");
	if ($this->errors != '') {
			$this->GenerateErrors();

		}
}
    }

    function btnNew_click()
    {
        global $MIOLO, $module, $item;
        
        $auth = $this->manager->auth;
        $idUsuario = $auth->login->idkey;
        $bussUsuario = $MIOLO->GetBusiness("common",'usuario');

        $objUsuario = $bussUsuario->GetById2($idUsuario);

         $idSetor_usuario = $objUsuario->idSetor;

        $bussSetorUsuario = $MIOLO->GetBusiness("common", 'setor', $idSetor_usuario);
	$idSetor=$this->GetFormValue('idSetor');

		if($idSetor==''){
			$this->AddError("Setor não informado!");

		}else{
			$bussSetorPatrimonio = $MIOLO->GetBusiness("common", 'setor', $this->GetFormValue('idSetor'));
			if (!$this->manager->perms->checkAccess('adm_patrimonio_incluir',A_EXECUTE)) {
				$this->addError("Você não tem permissão para incluir itens patrimoniais!");


            return;
         }elseif($bussSetorUsuario->idinstituicao != $bussSetorPatrimonio->idinstituicao && !$this->manager->perms->isMemberOf($this->manager->login, 'ADM_PATRIMONIO_ADMIN')){
		$this->addError("Você não tem permissão para incluir itens patrimoniais em outra instituicao!");
             return;
            }

		}
//         if (!$this->manager->perms->checkAccess('adm_patrimonio_incluir',A_EXECUTE)) {
//            $this->addError("Você não tem permissão para incluir itens patrimoniais!");
//
//
//            return;
//         }elseif($bussSetorUsuario->idinstituicao != $bussSetorPatrimonio->idinstituicao && !$this->manager->perms->isMemberOf($this->manager->login, 'ADM_PATRIMONIO_ADMIN')){
//		$this->addError("Você não tem permissão para incluir itens patrimoniais em outra instituicao!");
//             return;
//            }


        $cf = new MCurrencyFormatter();
        $erro = '0';

        $data = $this->GetData();
        $setores = explode(';', $data->idSetor);
        $tipoIngresso = $this->GetFormValue('tipoIngresso');
        $quant = $this->GetFormValue('quant');
        $quantidadeNF = $this->GetFormValue('quantidadeNF');
        $idNF = $this->GetFormValue('idNF');
        $nF = $this->GetFormValue('notaFiscal2');
        $valor=$this->GetFormValue('valor');
	$idClassificador=$this->GetFormValue('idClassificador');
	$descricaoEstado=$this->GetFormValue('descricaoEstado');
	$dataAquisicao=$this->GetFormValue('dataAquisicao');
	$dataNotaFiscal=$this->GetFormValue('dataNotaFiscal');
	$dataAteste=$this->GetFormValue('dataAteste');

        // 20/10/2010 - Vitor Pacheco
        $subelemento = substr($data->idvidautil, -4, -2);




        if($this->cnpj){
	$data->cnpj = str_replace('.', '', $data->cnpj);
        $data->cnpj = str_replace('-', '', $data->cnpj);
        $data->cnpj = str_replace('/', '', $data->cnpj);
		}
	// Verificações de preenchimento obrigatório dos campos.
        $qtde = $this->GetFormValue('quantidadeOutros');
        $desc = $this->GetFormValue('descricao');
	$idsector = $this->GetFormValue('idSetor');

	if (($desc == '') or ($desc == NULL))
            $this->addError("Descrição não informada!");

	if (($idClassificador == '') or ($idClassificador == NULL))
            $this->addError("Classificador não informado!");

	if (($descricaoEstado == '') or ($descricaoEstado == NULL))
            $this->addError("Estado do Material não informado!");

	if (($dataNotaFiscal == '') or ($descricaoEstado == NULL))
            $this->addError("Data da Nota Fiscal nãp informada!");

	if (($dataAquisicao == '') or ($descricaoEstado == NULL))
            $this->addError("Data de Aquisição não informada!!");

	if (($dataAteste == '') or ($descricaoEstado == NULL))
            $this->addError("Data de Ateste não informada!");

        if ((($qtde < 1) or ($qtde == '') or ($qtde == NULL)) and (($quant < 1) or ($quant == '') or ($quant == NULL)))
            $this->addError("Quantidade não informada!");

	if($nF=='')	 $this->AddError("Nota Fiscal não informada!");
	if($valor=='') $this->AddError("Valor Total não informado!");

        // Daniel Bonfim
        if($data->cnpj) {
            if(!is_numeric($data->cnpj))
                $this->addError("Insira apenas números no campo CNPJ");
        }

        if ($this->errors != '') //Caso haja algum erro, exibe na tela.
		{ $this->GenerateErrors();


		}
        else {
            //busca numero da NF
            $itemNota = $MIOLO->GetBusiness($module, 'itemnota', $idNF);
            $notaFiscal = $MIOLO->GetBusiness($module, 'notafiscal', $itemNota->idNotaFiscal);
            if($tipoIngresso == 1 or $tipoIngresso == 9)
            {
                $data->notaFiscal = $notaFiscal->notaFiscal;
            }
            else
            {
                $data->notaFiscal = $this->GetFormValue('notaFiscal2');
            }

            if(!$quant) //não é COMPRA
            {
                //para COMPRAS 2006 busca a quant informada e gera um array de setores repetindo o mesmo setor informado, alem de buscar o idMaterial pelo codMaterial informado (não precisa usar lupa)
                if($tipoIngresso == '8')
                {
                    $quant[0] = $this->GetFormValue('quantidadeOutros');
                    for($i = 0; $i < $quant[0]; $i++)
                    {
                        $setores[$i] = $data->idSetor;
                    }
                    $objMaterial = $MIOLO->GetBusiness($module, 'material');
                    $objMaterial->GetByCod($data->filterCodigo);
                    $data->idMaterial = $objMaterial->idMaterial;
                }
                else //não é COMPRA ou COMPRAS 2006, busca quantideade de itens a serem patrimoniados
                {
                    $quant[0] = $this->GetFormValue('quantidadeOutros');
                    $data->quantidade = $quant[0];
                    for($i = 0; $i < $quant[0]; $i++)
                    {
                        $setores[$i] = $data->idSetor;
                    }
                }
            }
            $somaQuant = 0; //testa se a soma das quantidades para setores = total de itens empenhados
            foreach($quant as $q)
            {
                $somaQuant += $q;
            }
            $empenhado = $MIOLO->GetBusiness($module, 'empenhado', $data->idEmpenhado);
            if( ($tipoIngresso == '1' or $tipoIngresso == '9') and ($somaQuant != $quantidadeNF) )
            {
                $this->AddError("Quantidades informadas ($somaQuant) não conferem com a quantidade do item da Nota Fiscal ($quantidadeNF).");
                $erro = '2';
            }
            else
            {
                $i = 0;
                try
                {
                    $numItem = '';
                    $objectId = $MIOLO->GetBusiness('common', 'objectid');
                    $itemPatrimonioT = $this->manager->GetBusiness('adm','itempatrimonio');
                    $itemPatrimonioT->beginTransaction();
                    $movimentoPat = $this->manager->GetBusiness('adm','movimentopat');

					//se for COMPRA, atualiza os status
					if($tipoIngresso == 1  or $tipoIngresso == 9)
					{
						$empenhado->setTransaction($itemPatrimonioT->getTransaction());
						$empenhado->status = '2'; //CONTABILIZADO
						$empenhado->save();
						$itens = $empenhado->ListItensAPatrimoniarPorEmpenho($empenhado->idEmpenho);

						$empenho = $MIOLO->GetBusiness($module, 'empenho', $empenhado->idEmpenho);
						if(count($itens->result) == 1) //não há itens a patrimoniar, a não ser os que estão sendo patrimoniados nesta operação, então altera status tb do empenho
						{
							$empenho->setTransaction($itemPatrimonioT->getTransaction());
							$empenho->status = '3'; //ENTREGUE
							$empenho->save();
						}
					}
					else // se não for COMPRA, grava a NF, quando informada
					{
						if(($data->notaFiscal) && ($tipoIngresso != '8'))
						{
							$notaFiscal = $MIOLO->GetBusiness($module, 'notafiscal');
							$notaFiscal->setTransaction($itemPatrimonioT->getTransaction());
							$notaFiscal->notaFiscal = $data->notaFiscal;
							$notaFiscal->dataNotaFiscal = $data->dataNotaFiscal;
							$notaFiscal->valor =str_replace(',','.',str_replace('.','',$data->valor));                                                        
							$notaFiscal->desconto = str_replace(',','.',str_replace('.','',$data->valorDesconto));
							$notaFiscal->dataAteste = $data->dataAteste;
                                                        $notaFiscal->dataGarantia = $data->dataGarantia;
							$notaFiscal->situacao='A';
							$notaFiscal->obs = $data->obs;
                                                              $notaFiscal->idFornecedor = $data->idFornecedor;
							$notaFiscal->idinstituicao = $bussSetorPatrimonio->idinstituicao;

                                                        $notaFiscal->bloqueio = 'N';
                                                        // 15/06/2011 Daniel Bonfim
                            //$notaFiscal->cnpj = trim($data->cnpj);
							$notaFiscal->save();
							//var_dump($notaFiscal->idNotaFiscal);
						}
					}

                    foreach($setores as $setor)
                    {
                        $novoIdNumeroTermo = $movimentoPat->GetTermoFormatado($movimentoPat->GetNextIdTermo());
                        for($j = 0; $j < $quant[$i]; $j++)
                        {
                            $itemPatrimonio = $this->manager->GetBusiness('adm','itempatrimonio');
                            $movimentoPat = $this->manager->GetBusiness('adm','movimentopat');
                            $itemPatrimonio->setTransaction($itemPatrimonioT->getTransaction());
                            $data->idSetor = $setor;
                            $itemPatrimonio->SetData($data);
                            $itemPatrimonio->descricao = $data->descricao;
                            if ($data->tipoIngresso == '1' or $data->tipoIngresso == '9')
                            {
                            	$ide = $itemPatrimonio->getEmpenho($empenhado->idEmpenho);
								$ider = $ide->fields('numero');
								$data->numeroEmpenho = $ider;
								$itemPatrimonio->numeroEmpenho = $ider;
								$itemPatrimonio->idEmpenhado = $data->idEmpenhado;
                            }

                            if($data->tipoIngresso == '8')
                            {
                                $itemPatrimonio->tipoIngresso = '1';
                                $itemPatrimonio->valor = str_replace(',','.',str_replace('.','',$data->valor));
                            }

                                $itemPatrimonio->tipoIngresso = $data->tipoIngresso;
								//26-04-2012 Tiago Macedo
								
								$itemPatrimonio->valor = $notaFiscal->valor /  $data->quantidade;                                                                
								$itemPatrimonio->valor = explode(".", $itemPatrimonio->valor);
								$itemPatrimonio->valor = $itemPatrimonio->valor[0].".".substr($itemPatrimonio->valor[1],  0, 2);
                                                                //Contador para saber quantos itens vão ficar com os centavos de sobra.
								$restoContador =  str_replace(',','.',str_replace('.','',$data->valor)) - ($itemPatrimonio->valor*$data->quantidade);
								$restoContador = (int)(number_format($restoContador*100, 2));
								if ($restoContador > $j){
									$itemPatrimonio->valor += 0.01;
                                                                }
                                                                

                            $itemPatrimonio->dataAquisicao = $data->dataAquisicao;                            
                            $itemPatrimonio->marcaModelo = $data->marcaModelo;
                            $itemPatrimonio->notaFiscal = $data->notaFiscal;
                            // 21/10/2010 - Vitor Pacheco
                            $itemPatrimonio->subelemento = $subelemento;
                            $itemPatrimonio->idMaterial = $data->idMaterial;
                            $itemPatrimonio->idSetor = $data->idSetor;
                            $itemPatrimonio->descricaoEstado = $data->descricaoEstado;
                            $itemPatrimonio->idClassificador = $data->idClassificador;

			    $itemPatrimonio->idNotaFiscal = $notaFiscal->idNotaFiscal;

                            $processo = $this->manager->GetBusiness('protocolo', 'processo');
							$processo->getByNumeroFormatado($data->numPro);
                            if ($processo->tipo == null && $data->numPro != null) {
								$this->addError('Processo não encontrado. Por favor verifique se o código foi digitado corretamente.');
                                return false;
                            }
                            $serie = substr($processo->numProcesso,0,6);
                            $ano = substr($processo->numProcesso,7,4);
                            $codigo = substr($processo->numProcesso,12,2);
							if ((int)$processo->numProcesso == 0) {
								$itemPatrimonio->numPro = null;
							} else {
								$itemPatrimonio->numPro = $processo->numProcesso;
							}
                            //$ano.$serie.$codigo;

                            $itemPatrimonio->ativo = 'S';
                            $itemPatrimonio->numeroSerie = $data->numeroSerie;
							//var_dump($ider);
                            $itemPatrimonio->numeroEmpenho = $data->numeroEmpenho;

		$movimentoPat->numeroTermo = $novoIdNumeroTermo . '/' . date('Y');
		$movimentoPat->tipoMovimento = '1';
		$movimentoPat->idSetorOrigem = $data->idSetor;
		$movimentoPat->idSetorDestino = $data->idSetor;
		$movimentoPat->dataMovimento = $data->dataAquisicao;
		$auth = $this->manager->auth;
		$idUsuario = $auth->login->idkey;

		$movimentoPat->idUsuario=$idUsuario;

                            $itemPatrimonio->save();
                            $numItem .= "<BR>" . $itemPatrimonio->idItemPatrimonio;

                            $movimentoPat->setTransaction($itemPatrimonioT->getTransaction());
                            $movimentoPat->idItemPatrimonio = $itemPatrimonio->idItemPatrimonio;
                            $movimentoPat->save();
                           $itemPatrimonio->Log(OP_INS,"Novo item patrimoniado: " . $itemPatrimonio->idItemPatrimonio);
                        }

						if(($quant[$i] > 0) and ($tipoIngresso == '1' or $tipoIngresso == '9'))
						{
							//Item Requisição

							if($tipoIngresso == '9')
							{
								$idRequisicao = $empenhado->GetIdRequisicaoByIdEmpenhadoAcervo($itemPatrimonio->idEmpenhado);
								$itemReq = $MIOLO->GetBusiness($module, 'itemreqbib');
							}
							else
							{
								$idRequisicao = $empenhado->GetIdRequisicaoByIdEmpenhado($itemPatrimonio->idEmpenhado);
								$itemReq = $MIOLO->GetBusiness($module, 'itemreq');
							}

							$itemReq->GetById($idRequisicao, $itemPatrimonio->idMaterial);
							$itemReq->quantAutorizada += $quant[$i];
							if($itemReq->quantAutorizada == $itemReq->quantPedida)
							{
								$itemReq->status = '7';//ENTREGUE
							}
							else
							{
								$itemReq->status = '8';//EMPENHO PARCELADO
							}
							$itemReq->setTransaction($itemPatrimonioT->getTransaction());
							$itemReq->save();

							//Requisicao
							$requisicao = $MIOLO->GetBusiness('adm','requisicao',$idRequisicao);
							$itens = $requisicao->GetItemReqNaoEntregue();
							if(count($itens) > 1)
							{
								$requisicao->status = '8';//EXECUTADA PARCIALMENTE
							}
							else
							{
								$requisicao->status = '9';//EXECUTADA TOTALMENTE
							}
							$requisicao->setTransaction($itemPatrimonioT->getTransaction());
							$requisicao->save();
						}
			        $i++;
			    }



		    $itemPatrimonioT->endTransaction();



					if($this->GetFormValue('manterdados')=='Sim'){
						$go = $MIOLO->GetActionURL($module,'main:itempatrimonio:new','',array(


								'idvidautil'=>$this->GetFormValue('idvidautil'),
								'idmaterial'=>$this->GetFormValue('idMaterial'),
								'idsetor'=>$this->GetFormValue('idSetor'),
								'idnotafiscal'=>$this->GetFormValue('idNF'),
								'tipoIngresso'=>$this->GetFormValue('tipoIngresso'),
								'codigomaterial'=>$this->GetFormValue('filterCodigo'),
								'descricao'=>$this->GetFormValue('descricao'),
								'numeroserie'=>$this->GetFormValue('numeroSerie'),
								'numeroempenho'=>$this->GetFormValue('numeroEmpenho'),
								'cnpj2'=>$this->GetFormValue('cnpj'),
								'tomboanterior'=>$this->GetFormValue('tomboanterior'),
								'marcamodelo'=>$this->GetFormValue('marcaModelo'),
								'classificador'=>$this->GetFormValue('idClassificador'),
								'estadomaterial'=>$this->GetFormValue('descricaoEstado'),
								'dataaquisicao'=>$this->GetFormValue('dataAquisicao'),
								'setor'=>$this->GetFormValue('setor'),
								'processo'=>$this->GetFormValue('numPro'),
								'datainicio'=>$this->GetFormValue('datainiciouso'),
								'contacontabil'=>$this->GetFormValue('contacontabil'),
								'notafiscal'=>$this->GetFormValue('notaFiscal2'),
								'valortotal'=>$this->GetFormValue('valor'),
								'quantidade'=>$this->GetFormValue('quantidadeOutros'),
								'datanotafiscal'=>$this->GetFormValue('dataNotaFiscal'),
								'dataateste'=>$this->GetFormValue('dataAteste'),
								'obs'=>$this->GetFormValue('obs'),
								'valordesconto'=>$this->GetFormValue('valorDesconto'),
								'manter'=>$this->GetFormValue('manterdados'),
							));
					}else{
						$go = $this->manager->GetActionURL('adm','main:itempatrimonio:find');
					}



		    $empenho = $MIOLO->GetBusiness($module, 'empenho', $empenhado->idEmpenho);
		    if(($empenho->status != '3') && ($tipoIngresso == '1' or $tipoIngresso == '9'))
		    {
		        $go = $MIOLO->GetActionURL($module, $action, $empenhado->idEmpenho, array('tipoIngresso'=>$tipoIngresso, 'passo'=>'NotaFiscal'));
		    }

		    $MIOLO->Information("Item(ns) patrimoniado(s) com sucesso:" . $numItem, $go);
		}
		catch (Exception $e)
		{
		    $this->addError($e->getMessage());
		}
            }
        }

    }


    function btnNotaFiscal_click()
    {
        global $MIOLO, $module, $action, $item, $theme;

        $tipoIngresso = $this->GetFormValue('tipoIngresso');
        $passoRetorno = $this->GetFormValue('passoRetorno');
	//Thaís
	$itemPatrimonio = $MIOLO->GetBusiness('adm','itempatrimonio');

        //Thaís
        $data->idNotaFiscal = $this->GetFormValue('idNotaFiscal');
        $data->notaFiscal = $this->GetFormValue('notaFiscal');
        $data->dataNotaFiscal = $this->GetFormValue('dataNotaFiscal');
        $data->dataAteste = $this->GetFormValue('dataAteste');
        $data->obs = $this->GetFormValue('obs');
        $data->valor = $this->GetFormValue('valor');
        $data->valorDesconto = $this->GetFormValue('valorDesconto');
        $data->idItemNota = $this->GetFormValue('idItemNota');
        $data->idEmpenhado = $this->GetFormValue('idEmpenhado');
        $data->quantNF = $this->GetFormValue('quantNF');
        // 16/06/2011 - Daniel Bonfim
        //$data->cnpj = $this->GetFormValue('cnpj');
        $data->idFornecedor = $this->GetFormValue('idFornecedor');
         //Thaís
        //$empenhado = $MIOLO->GetBusiness($module, 'empenhado', $data->idEmpenhado);
         $empenho = $MIOLO->GetBusiness('adm','empenho',$item);

         $r = (float)$data->valor;
         //Thaís
         	$idemp = (integer)($item);
         	$notaf = $this->GetFormValue('notaFiscal');
         	$itemNota = $itemPatrimonio->NotaFiscal($notaf, $idemp);
         	$ritemNota = $itemNota->fields('idnotafiscal');
         	if ($ritemNota != NULL && $this->GetFormValue('idNotaFiscal') == NULL)
         	{
         		$this->addError('Nota Fiscal já cadastrada para esse empenho.');
         	}
         //Thaís

         if ($r > $empenho->valorSaldo && $this->GetFormValue('idNotaFiscal') == NULL)
         {

       		$this->addError('Valor Total da Nota Fiscal maior que o valor do Empenho');
       	}
        else
        {
         $idnota = (integer)($this->GetFormValue('idNotaFiscal'));
         $valorNota = $this->GetFormValue('valor');
         $valornotas = $itemPatrimonio->SomaValorEmpenho($idemp, $idnota);
         $r = $valornotas->fields('sum');
         $valorempenho = $empenho->valor;
         $valorn = (float)($valorNota);
         $valorTotal = $valorempenho - $valorNota;
         $valoritens = $valorempenho - $r;
         if ($valorn > $valoritens && $this->GetFormValue('idNotaFiscal') != NULL)
         {
         	$this->addError('Valor Total da Nota Fiscal maior que o valor do Empenho');
         }

        else
        {
        	$notaExistente = $itemPatrimonio-> NotaExistente($notaf, $idemp, $idnota);
        	$rnotaExistente = $notaExistente->fields('idnotafiscal');
        	if ($rnotaExistente != NULL &&  $this->GetFormValue('idNotaFiscal') != NULL)
        	{
        		$this->addError('Nota Fiscal já cadastrada para esse empenho!');
        	}
        	else
        	{
       //Thaís
        if($data->notaFiscal)
        {
            $notaFiscal 			= 	$MIOLO->GetBusiness($module, 'notafiscal');
            $notaFiscal->GetById($data->idNotaFiscal);

            $notaFiscal->notaFiscal 	= 	$data->notaFiscal;
            $notaFiscal->dataNotaFiscal 	= 	$data->dataNotaFiscal;
            $notaFiscal->valor 		= 	str_replace(',','.',str_replace('.','',$data->valor));
            $notaFiscal->desconto 		= 	str_replace(',','.',str_replace('.','',$data->valorDesconto));
            $notaFiscal->idEmpenho 		= 	$item;
            $notaFiscal->dataAteste 	= 	$data->dataAteste;
            $notaFiscal->obs 		= 	$data->obs;
            $notaFiscal->idFornecedor = $data->idFornecedor;
	$notaFiscal->bloqueio = 'N';
            // 15/06/2011 Daniel Bonfim
            if($data->cnpj) {
                $data->cnpj = str_replace('.', '', $data->cnpj);
                $data->cnpj = str_replace('-', '', $data->cnpj);
                $data->cnpj = str_replace('/', '', $data->cnpj);

                if(is_numeric($data->cnpj)) {
                    $notaFiscal->cnpj = trim($data->cnpj);
                } else {
                    $this->Error("Insira apenas números no campo CNPJ");
                    return;
                }
            }
            $notaFiscal->save();

            //itens da nota
            for($i = 0; $i < count($data->idEmpenhado); $i++)
            {
                $empenhado = $MIOLO->GetBusiness($module, 'empenhado', $data->idEmpenhado[$i]);
                $valor = str_replace(',','.',str_replace('.','',$empenhado->valorEmp)) / str_replace(',','.',str_replace('.','',$empenhado->quantidadeEmp));

                $itemNota = $MIOLO->GetBusiness($module, 'itemnota', $data->idItemNota[$i]);
                $itemNota->idEmpenhado = $data->idEmpenhado[$i];
                $itemNota->idNotaFiscal = $notaFiscal->idNotaFiscal;
                $itemNota->quantidade = $data->quantNF[$i];
                $itemNota->valor = $valor;
                $itemNota->save();
            }
        }

    //Thaís

    //}
    //Thaís
        //empenho
        $empenho = $MIOLO->GetBusiness('adm','empenho',$item);
        $empenho->status = '3';
        $empenho->save();

        if($passoRetorno == 'NotaFiscal')
        {
            $go = $MIOLO->GetActionURL($module, $action, $item, array('tipoIngresso'=>$tipoIngresso, 'passo'=>'NotaFiscal'));
            $theme->ClearContent();
            $MIOLO->Information("Nota Fiscal $notaFiscal->notaFiscal gravada com sucesso.", $go);
            return;
        }
       }
       }
      }
    }

    // Método a ser executado antes de renderizar cada linha
    function MyRowMethod($i, $row, $actions, $columns)
    {
        global $MIOLO, $module, $item;

        $textField = new MTextField("quant[$i]",$row[2],'',6);
        $columns[2]->control[$i] = $textField;
    }

    // Método a ser executado antes de renderizar cada linha
    function MyRowMethod2($i, $row, $actions, $columns)
    {
        global $MIOLO, $module, $item;

        $controles = array(
            new MTextField("quantNF[$i]", $row[4],'',6),
            new MHiddenField("idEmpenhado[$i]",$row[0],'',6),
            new MHiddenField("idItemNota[$i]",$row[5],'',6),
        );
        $columns['quantidadeNota']->control[$i] = $controles;
    }

	function btnExcluiNota_click()
	{
		 global $MIOLO, $module, $item;
		 $tipoIngresso = $this->GetFormValue('tipoIngresso');
                 $passoRetorno = $this->GetFormValue('passoRetorno');
		 $itemPatrimonio = $MIOLO->GetBusiness('adm','itempatrimonio');
		 $go = $MIOLO->GetActionURL($module, $action, $item, array('tipoIngresso'=>$tipoIngresso, 'passo'=>'NotaFiscal'));
		 $idnota = (integer)($this->GetFormValue('idNotaFiscal'));
		 $deleteItem = $itemPatrimonio->DeleteItemNota($idnota);
		 $deleteNota = $itemPatrimonio->DeleteNota($idnota);
		 $MIOLO->Information("Nota Fiscal excluída com sucesso.", $go);
	}
	     public static function Question($msg, $gotoYes = '', $gotoNo = '', $eventYes = '', $eventNo = '')
     {
			global $MIOLO;

			 $prompt = new Prompt(_M('Confirmation'), $msg, '/icons/tipo_requisicao.png');
			 $prompt->SetType('question');
			 $prompt->AddButton(_M('   Yes   '), $gotoYes, $eventYes);
			 $prompt->AddButton(_M('   No   '), $gotoNo, $eventNo);

			return $prompt;
		}

}