<?
class frmUoAlmoxarifadoRepMovimentacaoSubElemPreco extends MForm
{
    var $uoalmoxarifado;
    function __construct($uoalmoxarifado)
    {
 	    global $MIOLO, $module, $self;
        $this->uoalmoxarifado = $uoalmoxarifado;
 	    parent::__construct('Relatório de Movimentação de Almoxarifado / SubElemento por Preço');
 	    $this->eventHandler();
    }
    function CreateFields()
    {
        // 28-10-2011 - Daniel Bonfim
        $fields = array(
            new MSelection('mesReferencia', '','Mês referência',$this->geraMeses()),
            new MSelection('anoReferencia', '','Ano referência',$this->geraAnos()),
		);
        /*$fields = array
        (
			new MCalendarField('dataInicio',date('d/m/Y'),'Data Inicial',10,'informe a data inicial do relatório.'),
			new MCalendarField('dataFim',date('d/m/Y'),'Data Final',10,'informe a data final do relatório.'),
        );
         * 
         */
        $this->setFields($fields);
	    $buttons = array(
	        //new MButton('btnRelatorio','Gerar Relatório','PDF'),
                new MButton('btnRelatorio','Gerar Relatório'),
	    );
        $this->setButtons($buttons);
    }
    // 28-10-2011 - Daniel Bonfim
    public function geraMeses() {
        global $MIOLO;
        $meses = array(
            1 => 'Janeiro',
            2 => 'Fevereiro',
            3 => 'Março',
            4 => 'Abril',
            5 => 'Maio',
            6 => 'Junho',
            7 => 'Julho',
            8 => 'Agosto',
            9 => 'Setembro',
            10 => 'Outubro',
            11 => 'Novembro',
            12 => 'Dezembro',
        );
        return $meses;
    }
// 28-10-2011 - Daniel Bonfim
    public function geraAnos() {
        $anos = array();
        $anoAtual = date('Y');
        $anoInicial = 1970;
        for ($i = $anoAtual; $i >= $anoInicial; --$i) {
            $anos[(int) $i] = (int) $i;
        }
        return $anos;
    }
    
    function GeneratePageHeader($report)
    {
        $data = $this->getData();
        $date = date('d/m/Y');
        $x0 = $report->pdf->left-5;
        $x1 = $report->pdf->right-5;
        $h = $report->pdf->getFontHeight(10);
        $header = $report->pdf->openObject();
        $report->pdf->saveState();
        //$report->pdf->addPngFromFile($this->manager->getUI()->GetImageSrc('logonet.png','adm'), $x0, 760, 50, 50);
        $alturaCabecalho = $x0 + 70;
        $report->pdf->SetStrokeColor(0, 0, 0);
        $report->pdf->addText($alturaCabecalho, 800, 9,"UNIVERSIDADE FEDERAL DE JUIZ DE FORA                            {$this->uoalmoxarifado->nome}");
        $report->pdf->addText($alturaCabecalho, 800 - $h, 9,"SETOR DE ESTOQUE                                                                   TIPO DE MATERIAL: CONSUMO");
        $report->pdf->addText($alturaCabecalho, 800 - $h - $h, 9,"COORDENADORIA DE SUPRIMENTOS                                       PERÍODO: {$data->dataInicio} A {$data->dataFim}");
        $report->pdf->addText($alturaCabecalho, 800 - $h - $h- $h, 9,"RELATÓRIO DE MOVIMENTAÇÃO DE ALMOXARIFADO            DATA:{$date}");
        $report->pdf->restoreState();
        $report->pdf->closeObject();
        $report->pdf->addObject($header, 'all');
        $report->pdf->ezSetDy(+15);
    }
    
    function btnRelatorio_click() {   
        $mesReferencia = Form::getFormValue('mesReferencia');
        $anoReferencia = Form::getFormValue('anoReferencia');
        
        // 22-12-2011 - Daniel Bonfim
        $tipo = "SUBELEMENTO";
        $filtradoPor = "VALOR TOTAL";
        
        if(!$mesReferencia) {
            $this->addError("Selecione o mês");
            return;
        }
        if(!$anoReferencia) {
            $this->addError("Selecione o ano");
            return;
        }
        
        $idUoAlmoxerifado = $this->uoalmoxarifado->idUo;
        $uo = $this->uoalmoxarifado->sigla;
        //header("Location: http://".$_SERVER['HTTP_HOST']."/relatorios2/repRMA.php?tipo=$tipo&filtradoPor=$filtradoPor&idUoAlmoxerifado=$idUoAlmoxerifado&mes=$mesReferencia&ano=$anoReferencia");
        $this->page->AddJsCode('window.open("http://'.$_SERVER['HTTP_HOST'].'/relatorios2/repRMA.php?tipo='.$tipo."&filtradoPor=$filtradoPor&idUoAlmoxerifado=$idUoAlmoxerifado&mes=$mesReferencia&ano=$anoReferencia&uo=$uo".'");');
        
        /*
	    $k = new MKrono();
        switch (true)
        {
            case (!Form::getFormValue('dataInicio')):
                $this->addInfo('Selecione a data inicial.');
            return;
            case (!Form::getFormValue('dataFim')):
                $this->addInfo('Selecione a data final.');
            return;
            /*
            case ($k->DaysDiff(Form::getFormValue('dataInicio'),Form::getFormValue('dataFim')) > 31):
                $this->addInfo('O período deve ser menor que 31 dias.');
            return;
            
        }
        $ui = $this->manager->GetUI();
        $report = $ui->GetReport('adm','repUoAlmoxarifadoMovimentacao',$this->uoalmoxarifado);
        $report->Generate();
        /*
        $data = $this->getData();
		$cf = new MCurrencyFormatter();
        $report = new MEzPDFReport('2','portrait');
	    $report->pdf->ezSetMargins(80,180,32,32);
        $cols = array('Código','Especificação','Saldo Anterior','Entradas','Saidas','Saldo Atual');
        $options['textCol'] = array(0,0,0);
        $options['shaded'] = 1;
        $options['showLines'] = 0;
        $options['fontSize'] = 10;
        $options['width'] = 540;
        $options['xPos'] = 'left';
        $options['xOrientation'] = 'right';
        $report->pdf->ezText('',20);
        $movimentos = $this->uoalmoxarifado->getMovimentos($data->dataInicio,$data->dataFim);
        if ($movimentos)
        {
            foreach ($movimentos as $movimento)
            {
                $movimento->retrieveAssociation('material');
                $movimento->material->retrieveAssociation('subelemento');
                $dados[$movimento->material->idsubelemento][0] = (!$dados[$movimento->material->idsubelemento][0]) ? $movimento->material->idelemento.".".$movimento->material->idsubelemento : $dados[$movimento->material->idsubelemento][0];
                $dados[$movimento->material->idsubelemento][1] = (!$dados[$movimento->material->idsubelemento][1]) ? $movimento->material->subelemento->descricao : $dados[$movimento->material->idsubelemento][1];
                switch ($movimento->tipoMovimento)
                {
                    case 1:
                        $dados[$movimento->material->idsubelemento][3] += $movimento->valorTotal;
                    break;
                    case 3:
                        $dados[$movimento->material->idsubelemento][4] += $movimento->valorTotal;
                    break;
                    case 5:
                        $dados[$movimento->material->idsubelemento][3] += $movimento->valorTotal;
                        $dados[$movimento->material->idsubelemento][4] += $movimento->valorTotal;
                    break;
                }
                $dados[$movimento->material->idsubelemento][5] = (!$dados[$movimento->material->idsubelemento][5]) ? $this->uoalmoxarifado->getSaldoEstoquePorSubelemento($movimento->material->idsubelemento) : $dados[$movimento->material->idsubelemento][5];
            }
            $descontos = $this->uoalmoxarifado->getMovimentos($data->dataFim);
            if ($descontos)
            {
                foreach ($descontos as $desconto)
                {
                    switch ($desconto->tipoMovimento)
                    {
                        case 1:
                            $descontoEntrada += $desconto->valorTotal;
                        break;
                        case 3:
                            $descontoSaida += $desconto->valorTotal;
                        break;
                        case 5:
                            $descontoEntrada += $movimento->valorTotal;
                            $descontoSaida += $movimento->valorTotal;
                        break;
                    }
                }
            }
        }
        else
        {
            $this->addError('Não há movimentação no período.');
            return;
        }

        ksort($dados);
        foreach ($dados as $key=>$dado)
        {
            $resultado[] = array($dado[0],$dado[1],$cf->formatWithSymbol($cf->toDecimal($dado[5])+$cf->toDecimal($dado[4])-$cf->toDecimal($dado[3])),$cf->formatWithSymbol($cf->toDecimal($dado[3])),$cf->formatWithSymbol($cf->toDecimal($dado[4])),$cf->formatWithSymbol($cf->toDecimal($dado[5])));
            $totalSaldoAnterior += $cf->toDecimal($dado[5])+$cf->toDecimal($dado[4])-$cf->toDecimal($dado[3]);
            $totalEntradas += $cf->toDecimal($dado[3]);
            $totalSaidas += $cf->toDecimal($dado[4]);
            $totalSaldoAtual += $cf->toDecimal($dado[5]);
        }
        $resultado[] = array('TOTAIS','',$cf->formatWithSymbol($totalSaldoAnterior),$cf->formatWithSymbol($totalEntradas),$cf->formatWithSymbol($totalSaidas),$cf->formatWithSymbol($cf->toDecimal($totalSaldoAtual) + $cf->toDecimal($descontoEntrada) - $cf->toDecimal($descontoSaida)));
        $this->generatePageHeader($report);
        $report->pdf->ezTable($resultado,$cols,'',$options);
	    $report->Execute();
        */
    }
}
?>
