<?

class BusinessAdmComponente extends Business
{
    public $idComponente;
    public $descricao;
    public $componentes;
 
    function __construct($data = null)
    {
        parent::__construct('sigaept',$data);
    }
	
    function OnCreate($data)
    {
        if (!empty($data))
        {
            $this->GetById($data);
        }
    }

    function GetById($id)
    {
        $this->idComponente = $id;
        $this->retrieve();
        return $this;
    }

    function ListByDescricao($descricao)
    {
        $criteria =  $this->getCriteria();
        $criteria->addCriteria('descricao','LIKE', "'%$descricao%'");
        $criteria->addOrderAttribute('idComponente');
        return $criteria->retrieveAsQuery();
    }

    function getSituacao()
    {
        $this->idComponente = $id;
        return $this->descricao;
    }

    function ListAll()
    {
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('idComponente');
        $criteria->AddColumnAttribute('descricao');
        $criteria->addOrderAttribute('descricao');
        return $criteria->retrieveAsQuery();
    }
    
    function selAllBy()
    {
        return $this->ListAll()->chunkResult();
    }
    
    function listarInspecionados($idInspecao){
        
        $query.= "ic.id_componente
		     FROM vei_inspecao_componente ic inner join vei_componente c
                  on  c.id_componente = ic.id_componente
                     where  id_inspecao = $idInspecao
            ";
	
	$sql = new sql($query);
        $query2 = $this->Query($sql);
        
        return $query2;
    }
    
    function listarInspecaoFim($idInspecao){
        
        $query.= "ic.id_componente
		     FROM vei_inspecao_componente ic inner join vei_componente c
                  on  c.id_componente = ic.id_componente
                     where  id_inspecao = $idInspecao
                  and id_inspetor_fim notnull
            ";
	
	$sql = new sql($query);
        $query2 = $this->Query($sql);
        
        return $query2;
    }
    
    function ListComponenteNaoInspecionado($idInspecao)
    {   global $MIOLO;
   
        $itemComponente = $this->listarInspecionados($idInspecao);
        $componente = $MIOLO->getBusiness('adm','componente');
        $cont = count($itemComponente->result);
        $lista_componentes = array();
        
        for($i = 0;$i < $cont;$i++){
           $idComponente =  $itemComponente->result[$i][0];
           $c = $componente->GetById($idComponente);
           $lista_componentes[$i] = $c->idComponente;
        }
        return $lista_componentes;
    }
    
    function ListComponenteNaoInspecionadoFim($idInspecao)
    {   global $MIOLO;
   
        $itemComponente = $this->listarInspecaoFim($idInspecao);
        $componente = $MIOLO->getBusiness('adm','componente');
        $cont = count($itemComponente->result);
        $lista_componentes = array();
        
        for($i = 0;$i < $cont;$i++){
           $idComponente =  $itemComponente->result[$i][0];
           $c = $componente->GetById($idComponente);
           $lista_componentes[$i] = $c->idComponente;
        }
        return $lista_componentes;
    }
    
    function listaDeComponentes(){
        $lista_componentes = array();
        $query.= "c.id_componente
		     FROM vei_componente c
            ";
	
	$sql = new sql($query);
        $cont= count($this->Query($sql)->result);
       
           for($i = 0;$i < $cont;$i++){
               $c = $this->GetById($this->Query($sql)->result[$i][0]);
                $lista_componentes[$i] = $c->idComponente;
           }
        return $lista_componentes;
    }
    
    public function compara($idInspecao){
        $array1 = $this->listaDeComponentes();
        $array2 = $this->ListComponenteNaoInspecionado($idInspecao);
        $result1 = array_diff($array1, $array2);
        $result2 = array_diff($array2, $array1);
        $idComponentes = array_merge($result1, $result2);
        $itensComponentes = $this->AddComponentes($idComponentes);
        return $itensComponentes;
    }
    
    public function comparaFim($idInspecao){
        $array1 = $this->listaDeComponentes();
        $array2 = $this->ListComponenteNaoInspecionadoFim($idInspecao);
        $result1 = array_diff($array1, $array2);
        $result2 = array_diff($array2, $array1);
        $idComponentes = array_merge($result1, $result2);
        $itensComponentes = $this->AddComponentes($idComponentes);
        return $itensComponentes;
    }
    
    function AddComponentes($idComponentes){
        global $MIOLO;
        $cont = count($idComponentes);
        $componente = $MIOLO->getBusiness('adm','componente');
        
        for($i = 0;$i < $cont;$i++){
            
            $componente = $this->GetById($idComponentes[$i]);
            $this->componentes[] = $componente;
            
        }
        
        $tam = count($this->componentes);
       
        
        for($j = 0; $j < $tam; $j++){
        //foreach($this->componentes as $linha){ 
           $componente =  $this->componentes[$j];
           
	   $itemComponente = array($componente->idComponente=>$componente->descricao,);
        }
        
        return $itemComponente;
    }

}
?>
