<?
class BusinessAdmMotorista extends Business
{
	public $idMotorista;
	public $carteiraHab;
	public $dataValidade;
        public $categoria;
	public $idPessoa;
	public $nomeId;
        public $uos;
        public $ativo;
        public $iduo;

	function __construct($data = null)
	{
		parent::__construct('sigaept', $data);
	}

    function OnCreate($data)
    {
        if (empty($data))
        {

        }
        else
        {
            $this->GetById($data);
        }
    }

	function GetById($id)
	{
		$this->idMotorista = $id;
		$this->retrieve();
		return $this;
	}

	function ListAll()
	{
        $criteria =  $this->getCriteria();
        return $criteria->retrieveAsQuery();
	}

	function ListByNome($nome)
	{
        $criteria =  $this->getCriteria();
        $criteria->addCriteria('pessoa.nome','LIKE', "$nome");
        $criteria->addOrderAttribute('pessoa.nome');
        return $criteria->retrieveAsQuery();        
	}
	//criado 07-08-2013
        function ListByMotoristaUo($nome,$iduo)
	{
        $ativo = 1;
        $sql = new sql('m.idmotorista, p.nome','');
        $sql->SetJoin('ad_motorista m','cm_pessoa p','p.idpessoa = m.idpessoa');
        $sql->SetJoin('ad_motorista m','ad_motoristauo  u','u.idmotorista = m.idmotorista');
        $sql->SetWhere("p.nome LIKE $nome");
        $sql->SetWhereAnd('u.iduo = '.$iduo);
        $sql->SetWhereAnd('m.ativo = '."'$ativo'");
        $sql->SetOrderBy('p.nome');
        return $this->Query($sql);
        }
	
	function ListById()
	{
		$criteria = $this->getCriteria();
		$criteria->addColumnAttribute('idPessoa');
		$criteria->addOrderAttribute('idPessoa');
		return $criteria->retrieveAsQuery();
	}	
	function ListNomeById()
	{
		global $MIOLO;

		$criteria = $this->getCriteria();
		
		$criteria->addColumnAttribute('pessoa.nome');//linha 0
		$criteria->addColumnAttribute('idMotorista');//linha 1		
		$criteria->addOrderAttribute('pessoa.nome');
		return $criteria->retrieveAsQuery();
		
	}
        
        function ListMotoristaNome(){
	
		$criteria = $this->getCriteria();
        
		$criteria->addColumnAttribute('idMotorista');
		$criteria->addColumnAttribute('pessoa.nome');		
		$criteria->addOrderAttribute('pessoa.nome');
		return $criteria->retrieveAsQuery();
		
	}
        function getMotorista()
        {
             $this->retrieveAssociation('motorista');
        }
        
        function DeleteMotorista($idUo, $idMotorista)
    { 
            $sql = new sql('','ad_motoristauo','(iduo = ?) and (idmotorista = ?)');
	    $ok = $this->execute($sql->delete(array($idUo,$idMotorista)));
            return $ok;
    }
     function getMotoristaUo($iduo){        
        $sql = new sql();
        $sql->SetColumns('DISTINCT m.idmotorista, p.nome
        ');
        $sql->SetTables('
                cm_pessoa p inner join  ad_motorista m on p.idpessoa = m.idpessoa
                inner join ad_motoristauo u on u.idmotorista = m.idmotorista
        ');
        $sql->SetWhere('m.ativo = 1');
        $sql->SetWhereAnd('u.iduo = '.$iduo);
        return $this->Query($sql);       
    }
     public function listMotorista($iduo){
        $query.= "DISTINCT m.idmotorista, p.nome
           from cm_pessoa p inner join ad_motorista m
           on p.idpessoa = m.idpessoa inner join ad_motoristauo u on u.idmotorista = m.idmotorista
           where m.ativo = '1' and u.iduo = $iduo";
		$sql = new sql($query);
                $query2 = $this->Query($sql);
                return $query2;
        }
    function GetByIDMotoristaPessoa($idPessoa)
    {
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('idmotorista');
        $criteria->addCriteria('idpessoa','=', "$idPessoa");
        $result = $criteria->retrieveAsQuery();
        return $result->result[0][0];
    }
        
}

	
?>
