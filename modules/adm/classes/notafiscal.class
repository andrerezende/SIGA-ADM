<?php
/**
 * BusinessAdmMovimento
 */
class BusinessAdmNotaFiscal extends Business
{
	public $idNotaFiscal;
	public $notaFiscal;
	public $dataNotaFiscal;
	public $valor;
	public $desconto;
	public $idLiquidacao;
	public $idEmpenho;
	public $dataAteste;
	public $liquidacao;
	public $situacao;
	public $motivoestorno;
        public $bloqueio;
	public $idinstituicao;
        public $databloqueio;
        
    public $obs;
    // 15/06/2011 - Daniel Bonfim
    //public $cnpj;
    public $idFornecedor;
    public $fornecedor;
    
    //public $nota;
	public $empenhado;
	public $empenho;

	function __construct($data = null)
	{
		parent::__construct('sigaept', $data);
	}

    function OnCreate($data)
    {
        if (empty($data))
        {
//            $this->initialize();
        }
        else
        {
            $this->GetById($data);
        }
    }

	function GetById($id)
	{
		$this->idNotaFiscal = $id;
		$this->retrieve();
		return $this;
	}
	function GetByNumero($notaFiscal,$idEmpenho)
	{
		$criteria = $this->getCriteria();
		$criteria->AddColumnAttribute('idNotaFiscal');
		$criteria->addCriteria('notaFiscal','=',"'$notaFiscal'");
		$criteria->addCriteria('idEmpenho','=',$idEmpenho);
		$id = $criteria->retrieveAsQuery()->result[0][0];
		$this->idNotaFiscal = $id;
		$this->retrieve();
		return $this;
	}

	function GetNotasByIdEmpenho($idEmpenho)
	{
		$criteria = $this->getCriteria();
		$criteria->AddColumnAttribute('idNotaFiscal');
		$criteria->AddColumnAttribute('notaFiscal');
		$criteria->AddColumnAttribute('dataNotaFiscal','dataNotaFiscal');
		$criteria->AddColumnAttribute('valor');
		$criteria->addCriteria('idEmpenho','=',$idEmpenho);
		return $criteria->retrieveAsQuery();
	}

	function GetTotalNotasByIdEmpenho($idEmpenho,$liquidado=false)
	{
		$criteria = $this->getCriteria();
		$criteria->AddColumnAttribute('sum(valor)');
		$criteria->addCriteria('idEmpenho','=',$idEmpenho);
		if($liquidado)
		{
			$criteria->addCriteria('idLiquidacao','is not','null');
		}
		$query = $criteria->retrieveAsQuery();
		return $query->result[0][0];
	}

	function getItem($id)
    {
        foreach ($this->itens as $itemNota)
        {
            if ($itemNota->idItemNota == $id)
            {
                return $itemNota;
            }
        }
        return false;
    }
    function addItem($item)
    {
        $item->idNotaFiscal = $this->idNotaFiscal;
        $this->itens[] = $item;
    }
    function isContabilizado()
    {
        if ($this->itens)
        {
            foreach ($this->itens as $itemNota)
            {
                if (!$itemNota->isContabilizado()) return false;
            }
        }
        return true;
    }

	function GetByNota($nota)
	{
		$this->notaFiscal = $nota;
		$this->retrieve();
		return $this;
	}

	public function getFornecedor() {
		$this->retrieveAssociation('fornecedor');
		return $this->fornecedor;
	}

	function getEmpenho()
    {
        $this->retrieveAssociation('empenho');
        return $this->empenho;
    }

	function getProcessoPagamento($nota)
    {
		$criteria = $this->getCriteria();
		$criteria->AddColumnAttribute('empenho.numPro');
		$criteria->addCriteria('idNotaFiscal','=',$nota);
		$query = $criteria->retrieveAsQuery();
		return $query->result[0][0];
    }

	function GetValorNotaItensEmpenho($nota, $idEmpenho)
	{
		$criteria = $this->getCriteria();
		$criteria->addColumnAttribute('itens.quantidade');
		$criteria->addColumnAttribute('itens.valor');
		$criteria->addCriteria('itens.empenhado.idEmpenho','=',"$idEmpenho");
		$criteria->addCriteria('idNotaFiscal','=',"$nota");
		$query = $criteria->retrieveAsQuery();
		if($query->result)
		{
			$total = 0.0;
			foreach($query->result as $r)
			{
				$total += $r[0] * str_replace(',','.',$r[1]);
			}
		}
		return $total;
	}

	function GetNotasParaLiquidar($notas)
	{
		$criteria = $this->getCriteria();
		$criteria->AddColumnAttribute('empenho.numero');
		$criteria->AddColumnAttribute('idNotaFiscal');
		$criteria->AddColumnAttribute('notaFiscal');
		$criteria->AddColumnAttribute('dataNotaFiscal','dataNotaFiscal');
		$criteria->AddColumnAttribute('valor');
		$criteria->addCriteria('idNotaFiscal','in',$notas);
		$criteria->AddOrderAttribute('empenho.numero');
		return $criteria->retrieveAsQuery();
	}

	function GetIdEmpenhosByNotas($notas)
	{
		$criteria = $this->getCriteria();
		$criteria->setDistinct(true);
		$criteria->AddColumnAttribute('idEmpenho');
		$criteria->addCriteria('idNotaFiscal','in',"($notas)");
		$criteria->AddOrderAttribute('idEmpenho');
		return $criteria->retrieveAsQuery();
	}

	function GetValorByNotaFiscal($notas)
	{
		$criteria = $this->getCriteria();
		$criteria->AddColumnAttribute('valor');
		$criteria->addCriteria('idNotaFiscal','in',"(".$notas.")");
		$query = $criteria->retrieveAsQuery();
		return $query->result[0][0];
	}

	function GetNotasByEmpenho($idEmpenho)
	{
		$criteria = $this->getCriteria();
		$criteria->AddColumnAttribute('idNotaFiscal');
		$criteria->addCriteria('idEmpenho','=',$idEmpenho);
		$query = $criteria->retrieveAsQuery();
		return $query->result;
	}

	function GetNotasByEmpenhoLiquidacao($idEmpenho, $notas)
	{
		$notas = explode(',',$notas);
		$criteria = $this->getCriteria();
		$criteria->AddColumnAttribute('idNotaFiscal');
		$criteria->addCriteria('idEmpenho','=',$idEmpenho);
		$query = $criteria->retrieveAsQuery();
		$ret = array();
		foreach($query->result as $r)
		{
			if(in_array($r[0], $notas))
			{
				$ret[] = $r[0];
			}
		}
		return $ret;
	}

    function existeByNumeroAndFornecedor($numero,$idFornecedor)
    {
		$criteria = $this->getCriteria();
		$criteria->AddColumnAttribute('notaFiscal');
		$criteria->addCriteria('empenho.idFornecedor','=',$idFornecedor);
		return @in_array($numero,$criteria->retrieveAsQuery()->result[0]) ? true : false;
    }
    
   	function GetIdLiquidacaoByIdEmpenho($idEmpenho)
	{
		$criteria = $this->getCriteria();
		$criteria->AddColumnAttribute('idLiquidacao');
		$criteria->addCriteria('idEmpenho','=',$idEmpenho);
		$query = $criteria->retrieveAsQuery();
		return $query->result[0][0];
	}
	
	function GetIdNotaByIdLiquidacao($idLiquidacao)
	{
       	$criteria = $this->getCriteria();
		$criteria->AddColumnAttribute('idNotaFiscal');
		$criteria->addCriteria('idLiquidacao','=',$idLiquidacao);
		$query = $criteria->retrieveAsQuery();
		return $query->result;
	}

	function ListItens($idNotaFiscal)
	{
		//busca o tipo da licitacao correspondente
		$criteria = $this->getCriteria();
		$criteria->setDistinct(true);
		$criteria->AddColumnAttribute('itens.empenhado.licitacao.idTipoLicitacao');
		$criteria->addCriteria('idNotaFiscal','=',$idNotaFiscal);
		$query = $criteria->retrieveAsQuery();
		$tipo = $query->result[0][0];

		$criteria = $this->getCriteria();
		if($tipo == '2')
		{
			$criteria->AddColumnAttribute('itens.empenhado.itemServExt.servico.descricao');
			$criteria->AddColumnAttribute('itens.empenhado.itemServExt.servico.codServico', 'codigo');
		}
		elseif($tipo == '1' or $tipo == '4')
		{
			$criteria->AddColumnAttribute('itens.empenhado.itemreq.material.descricao');
			$criteria->AddColumnAttribute('itens.empenhado.itemreq.material.codmaterial', 'codigo');
		}
		elseif($tipo == '3')
		{
			$criteria->AddColumnAttribute('itens.empenhado.itemreqbib.material.descricao');
			$criteria->AddColumnAttribute('itens.empenhado.itemreqbib.material.codmaterial', 'codigo');
		}
		$criteria->AddColumnAttribute('itens.quantidade');
		$criteria->AddColumnAttribute('itens.valor');
		$criteria->addCriteria('idNotaFiscal','=',$idNotaFiscal);
		$query = $criteria->retrieveAsQuery();
		return $query->result;
	}

	function existeNotaNaoLiquidadaPorEmpenho($idEmpenho)
	{
       	$criteria = $this->getCriteria();
		$criteria->AddColumnAttribute('idNotaFiscal');
		$criteria->addCriteria('idLiquidacao','is','null');
		$criteria->addCriteria('idEmpenho','=',$idEmpenho);
		$query = $criteria->retrieveAsQuery();
		return count($query->result);
	}
	function obterCamposPorId($id){

		$query="* from ad_notafiscal where idnotafiscal =$id";
		  
				$sql = new sql($query);

		
		$query2 = $this->Query($sql);
		return $query2;
	}

    public function listNotas($notafiscal = null, $dataNotaFiscal = null, $valor = null, $dataAteste = null) {
//		16/06/2011 - Daniel Bonfim
		$sql = new sql(
			"nf.idnotafiscal as idNotafiscal, nf.notafiscal as notafiscal, TO_CHAR(nf.datanotafiscal,'DD/MM/YYYY') as datanotafiscal, nf.valor as valor, TO_CHAR(nf.dataAteste,'DD/MM/YYYY') as dataAteste, nf.cnpj as cnpj",
			"ad_notafiscal nf"
		);
		if (!empty($notafiscal) && !is_null($notafiscal)) {
			$sql->SetWhere("nf.notafiscal = UPPER('$notafiscal')");
		}
		if (!empty($dataNotaFiscal) && !is_null($dataNotaFiscal)) {
			$sql->SetWhere("nf.datanotafiscal = '$dataNotaFiscal'");
		}
		if (!empty($valor) && !is_null($valor)) {
			$sql->SetWhere("nf.valor = '$valor'");
		}
		if (!empty($dataAteste) && !is_null($dataAteste)) {
			$sql->SetWhere("nf.dataAteste = '$dataAteste'");
		}
		$sql->SetOrderBy("nf.datanotafiscal desc");
		$query = $this->Query($sql);
		return $query;
	}
	   

function Filtrar($campos, $validador) {//  Phillip  14 - 03 - 2012  Filtro GERAL
            
				$contador=-1; //Contador para a quantidade de AND // PRoblema #202 - RedMIne
				$desc_campo= array(
									"a.idnotafiscal",//0
									"a.notafiscal",     //1
									"a.datanotafiscal", //2
									"a.valor",			//3
									"a.dataateste",		//4
									"i.tomboanterior",	//5
									"i.numeroempenho",		//6
									"a.cnpj",			//7
									"i.numeroserie",		//8
									"a.situacao"		//9
									);
				
				$query=	" 	DISTINCT 
							a.idnotafiscal,
							a.notafiscal,
							TO_CHAR(a.datanotafiscal,'DD/MM/YYYY') as datanotafiscal, 
							a.valor as valor, 
							TO_CHAR(a.dataAteste,'DD/MM/YYYY') as dataAteste
                			FROM ad_notafiscal a LEFT JOIN ad_itempatrimonio i ON (a.idnotafiscal=i.idnotafiscal)";
				
				for($i=0;$i<10;$i++){
					
					if($campos[$i]!='' && $i==3){$desc_campo[$i]=$desc_campo[$i]."=$campos[$i]";$contador++;}else{
					if($campos[$i]!=''&& ($i==2 || $i==4 || $i==0)){$desc_campo[$i]="TO_CHAR($desc_campo[$i],'DD/MM/YYYY')"."="."'$campos[$i]' ";$contador++;}
					else{					
					if($campos[$i]!=''){$desc_campo[$i]=$desc_campo[$i]." like '%$campos[$i]%' ";$contador++;}}	
					}
						}

				if($validador==1){$complemento=" AND a.datanotafiscal >=(current_date-7) ";}
				if($contador>-1){$query.=" WHERE a.situacao='A' $complemento AND ";}
				else{$query.=" WHERE a.situacao='A'  $complemento ";}
				
				for($i=0;$i<10;$i++){
							
						if($campos[$i]!=''){$query.=$desc_campo[$i];if($contador>0){$query.=" AND ";$contador--;}}
									}                 
								

				$query.= " ORDER BY a.idnotafiscal";

				$sql = new sql($query);

		
		$query2 = $this->Query($sql);
		return $query2;
	}

        function Filtrar2($campos) {

                        $contador=0;
			for($i=0;$i<8;$i++){
				if($campos[$i]!=""){
					$contador++;
				}
			}
			if($contador==0){
				$validador=1;
			}
			else{
				$validador=0;
			}
            
                                $contador=-1; //Contador para a quantidade de AND // PRoblema #202 - RedMIne
				$desc_campo= array(
									"a.idnotafiscal",//0
									"a.notafiscal",     //1
									"a.datanotafiscal", //2
									"a.valor",			//3
									"a.dataateste",		//4
									"i.tomboanterior",	//5
									"i.numeroempenho",		//6
									"a.cnpj",			//7
									"i.numeroserie",		//8
									"a.situacao"		//9
									);
				
				$query=	" 	DISTINCT 
							a.idnotafiscal
                			FROM ad_notafiscal a LEFT JOIN ad_itempatrimonio i ON (a.idnotafiscal=i.idnotafiscal)";
				
				for($i=0;$i<10;$i++){
					
					if($campos[$i]!='' && $i==3){$desc_campo[$i]=$desc_campo[$i]."=$campos[$i]";$contador++;}else{
					if($campos[$i]!=''&& ($i==2 || $i==4 || $i==0)){$desc_campo[$i]="TO_CHAR($desc_campo[$i],'DD/MM/YYYY')"."="."'$campos[$i]' ";$contador++;}
					else{					
					if($campos[$i]!=''){$desc_campo[$i]=$desc_campo[$i]." like '%$campos[$i]%' ";$contador++;}}	
					}
						}

				if($validador==1){$complemento=" AND a.datanotafiscal >=(current_date-7) ";}
				if($contador>-1){$query.=" WHERE a.situacao='A' $complemento AND ";}
				else{$query.=" WHERE a.situacao='A'  $complemento ";}
				
				for($i=0;$i<10;$i++){
							
						if($campos[$i]!=''){$query.=$desc_campo[$i];if($contador>0){$query.=" AND ";$contador--;}}
									}                 
								

				$query.= " ORDER BY a.idnotafiscal";

				$sql = new sql($query);

		
		$query2 = $this->Query($sql);
		return $query2->result;
	}
        
	function getSituacaoById($id){

		$query="situacao from ad_notafiscal where idnotafiscal =$id";

				$sql = new sql($query);

		
		$query2 = $this->Query($sql);
		return $query2;
	}
        
        // 04/10/2011 - Daniel Bonfim
        function getNextId() {
   		$sql = new sql("MAX(idnotafiscal)", "ad_notafiscal");
   		$query = $this->Query($sql);
   		return $query->result[0][0] + 1;
   	}
}
