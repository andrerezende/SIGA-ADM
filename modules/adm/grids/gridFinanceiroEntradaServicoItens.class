<?
global $MIOLO;
class gridFinanceiroEntradaServicoItens extends MGrid
{
    function __construct($objEmpenho)
    {
        global $MIOLO, $page, $action;
        $objEmpenho->getEmpenhado();
        $cf = new MCurrencyFormatter();
        if (count($objEmpenho->empenhado) == 1)
        {
            foreach ($objEmpenho->empenhado as $empenhado) 
            {
                $empenhado->getAtributos();
                $dados[$empenhado->idEmpenhado][0] = $empenhado->idEmpenhado;
                $dados[$empenhado->idEmpenhado][1] = $empenhado->item;
                $dados[$empenhado->idEmpenhado][2] = $empenhado->itemServExt[0]->complemento;
                $dados[$empenhado->idEmpenhado][3] = $cf->formatWithSymbol($cf->toDecimal($empenhado->valorSaldo));
                $dados[$empenhado->idEmpenhado][4] = Form::getFormValue('valor');
            }
        }
        else
        {
            foreach ($objEmpenho->empenhado as $empenhado)
            {
                $empenhado->getAtributos();
                unset($valor);
                if ($valorExecutado = Form::getFormValue('valorExecutado'))
                {
                    foreach ($valorExecutado as $idEmpenhado=>$valor)
                    {
                        if ($empenhado->idEmpenhado == $idEmpenhado) break;
                    }
                }
                else
                {
                    $valor = $cf->formatWithSymbol($cf->toDecimal($empenhado->valorSaldo));
                }
                $empenhado->retrieveAssociation('itemServExt');
                if ($empenhado->quantidadeSaldo)
                {
                    $dados[$empenhado->idEmpenhado][0] = $empenhado->idEmpenhado;
                    $dados[$empenhado->idEmpenhado][1] = $empenhado->item;
                    $dados[$empenhado->idEmpenhado][2] = $empenhado->itemServExt[0]->complemento;
                    $dados[$empenhado->idEmpenhado][3] = $cf->formatWithSymbol($cf->toDecimal($empenhado->valorSaldo));
                    $dados[$empenhado->idEmpenhado][4] = $valor;
                }
            }
        }
        $valorExecutado = new MCurrencyField('valorExecutado[%0%]','','',10);
        $columns = array(
            new MGridColumn('idEmpenhado','left',false,'',false),
            new MGridColumn('Item','center',false,'6%'),
            new MGridColumn('ServiÃ§o','left',false,'58%'),
            new MGridColumn('Saldo Empenhado','center',true,'18%'),
            new MGridColumn('Saldo Empenhado','center',true,'',false),
            new MGridControl($valorExecutado,'Valor Executado','center',true,'18%'),
        );
        $this->SetFilter(false);
        parent::__construct($dados,$columns,$action,1000000);
        $this->setRowMethod('gridFinanceiroEntradaServicoItens','MyRowMethod');
        $this->SetLinkType('hyperlink');
    }
    function GenerateHeader()
    {
        return null;
    }
    function GenarateFooter()
    {
        return null;
    }
    public function myRowMethod($i,$row,$actions,$columns)
    {
        $columns[5]->control[$i]->setValue($row[4]);
    }
}

